<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Nomad\Api;

use \Nomad\Configuration;
use \Nomad\ApiClient;
use \Nomad\ApiException;
use \Nomad\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{

    /**
     * API Client
     * @var \Nomad\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Nomad\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://robika.dyndns.org:4646/v1');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Nomad\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Nomad\ApiClient $apiClient set the API client
     * @return JobApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * create
     *
     * 
     *
     * @param \Nomad\Model\Job[] $job The JSON definition of the job. (required)
     * @param string $region Cross-Region Request (optional)
     * @return \Nomad\Model\CreateJobResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function create($job, $region = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createWithHttpInfo ($job, $region);
        return $response; 
    }


    /**
     * createWithHttpInfo
     *
     * 
     *
     * @param \Nomad\Model\Job[] $job The JSON definition of the job. (required)
     * @param string $region Cross-Region Request (optional)
     * @return Array of \Nomad\Model\CreateJobResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function createWithHttpInfo($job, $region = null)
    {
        
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling create');
        }
  
        // parse inputs
        $resourcePath = "/job/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($region !== null) {
            $queryParams['region'] = $this->apiClient->getSerializer()->toQueryValue($region);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($job)) {
            $_tempBody = $job;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\CreateJobResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\CreateJobResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\CreateJobResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * get
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $stale Consistency Mode (optional)
     * @param string $region Cross-Region Request (optional)
     * @param string $pretty Formatted JSON Output (optional)
     * @return \Nomad\Model\GetJobResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function get($id, $stale = null, $region = null, $pretty = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getWithHttpInfo ($id, $stale, $region, $pretty);
        return $response; 
    }


    /**
     * getWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $stale Consistency Mode (optional)
     * @param string $region Cross-Region Request (optional)
     * @param string $pretty Formatted JSON Output (optional)
     * @return Array of \Nomad\Model\GetJobResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getWithHttpInfo($id, $stale = null, $region = null, $pretty = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling get');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($stale !== null) {
            $queryParams['stale'] = $this->apiClient->getSerializer()->toQueryValue($stale);
        }// query params
        
        if ($region !== null) {
            $queryParams['region'] = $this->apiClient->getSerializer()->toQueryValue($region);
        }// query params
        
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\GetJobResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\GetJobResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\GetJobResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * update
     *
     * 
     *
     * @param string $id ID (required)
     * @param \Nomad\Model\Job[] $job The JSON definition of the job. (required)
     * @param string $region Cross-Region Request (optional)
     * @return \Nomad\Model\CreateJobResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function update($id, $job, $region = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateWithHttpInfo ($id, $job, $region);
        return $response; 
    }


    /**
     * updateWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @param \Nomad\Model\Job[] $job The JSON definition of the job. (required)
     * @param string $region Cross-Region Request (optional)
     * @return Array of \Nomad\Model\CreateJobResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($id, $job, $region = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling update');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling update');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($region !== null) {
            $queryParams['region'] = $this->apiClient->getSerializer()->toQueryValue($region);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($job)) {
            $_tempBody = $job;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\CreateJobResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\CreateJobResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\CreateJobResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * remove
     *
     * 
     *
     * @param string $id ID (required)
     * @return \Nomad\Model\JobRemoveResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function remove($id)
    {
        list($response, $statusCode, $httpHeader) = $this->removeWithHttpInfo ($id);
        return $response; 
    }


    /**
     * removeWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @return Array of \Nomad\Model\JobRemoveResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function removeWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling remove');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\JobRemoveResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\JobRemoveResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\JobRemoveResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAllocations
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $all Returns all allocations of job with the given ID including those from past instances of the job. (optional)
     * @param string $stale Consistency Mode (optional)
     * @param string $region Cross-Region Request (optional)
     * @param string $pretty Formatted JSON Output (optional)
     * @return \Nomad\Model\GetJobAllocationsResponse[]
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getAllocations($id, $all = null, $stale = null, $region = null, $pretty = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAllocationsWithHttpInfo ($id, $all, $stale, $region, $pretty);
        return $response; 
    }


    /**
     * getAllocationsWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $all Returns all allocations of job with the given ID including those from past instances of the job. (optional)
     * @param string $stale Consistency Mode (optional)
     * @param string $region Cross-Region Request (optional)
     * @param string $pretty Formatted JSON Output (optional)
     * @return Array of \Nomad\Model\GetJobAllocationsResponse[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getAllocationsWithHttpInfo($id, $all = null, $stale = null, $region = null, $pretty = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAllocations');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}/allocations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($all !== null) {
            $queryParams['all'] = $this->apiClient->getSerializer()->toQueryValue($all);
        }// query params
        
        if ($stale !== null) {
            $queryParams['stale'] = $this->apiClient->getSerializer()->toQueryValue($stale);
        }// query params
        
        if ($region !== null) {
            $queryParams['region'] = $this->apiClient->getSerializer()->toQueryValue($region);
        }// query params
        
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\GetJobAllocationsResponse[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\GetJobAllocationsResponse[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\GetJobAllocationsResponse[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * dispatch
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $payload A []byte array encoded as a base64 string with a maximum size of 16KiB. (optional)
     * @param string $meta A map[string]string of metadata keys to their values. (optional)
     * @return \Nomad\Model\JobDispatchResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function dispatch($id, $payload = null, $meta = null)
    {
        list($response, $statusCode, $httpHeader) = $this->dispatchWithHttpInfo ($id, $payload, $meta);
        return $response; 
    }


    /**
     * dispatchWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $payload A []byte array encoded as a base64 string with a maximum size of 16KiB. (optional)
     * @param string $meta A map[string]string of metadata keys to their values. (optional)
     * @return Array of \Nomad\Model\JobDispatchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function dispatchWithHttpInfo($id, $payload = null, $meta = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling dispatch');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}/dispatch";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/x-www-form-urlencoded'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($payload !== null) {
            
            
            $formParams['Payload'] = $this->apiClient->getSerializer()->toFormValue($payload);
            
        }// form params
        if ($meta !== null) {
            
            
            $formParams['Meta'] = $this->apiClient->getSerializer()->toFormValue($meta);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\JobDispatchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\JobDispatchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\JobDispatchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createEvaluation
     *
     * 
     *
     * @param string $id ID (required)
     * @return \Nomad\Model\JobCreateEvaluationResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function createEvaluation($id)
    {
        list($response, $statusCode, $httpHeader) = $this->createEvaluationWithHttpInfo ($id);
        return $response; 
    }


    /**
     * createEvaluationWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @return Array of \Nomad\Model\JobCreateEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function createEvaluationWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createEvaluation');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}/evaluate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\JobCreateEvaluationResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\JobCreateEvaluationResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\JobCreateEvaluationResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getEvaluations
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $region Cross-Region Request (optional)
     * @return \Nomad\Model\GetJobEvaluationsResponse[]
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getEvaluations($id, $region = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getEvaluationsWithHttpInfo ($id, $region);
        return $response; 
    }


    /**
     * getEvaluationsWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $region Cross-Region Request (optional)
     * @return Array of \Nomad\Model\GetJobEvaluationsResponse[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getEvaluationsWithHttpInfo($id, $region = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEvaluations');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}/evaluations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($region !== null) {
            $queryParams['region'] = $this->apiClient->getSerializer()->toQueryValue($region);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\GetJobEvaluationsResponse[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\GetJobEvaluationsResponse[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\GetJobEvaluationsResponse[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * forcePeriodic
     *
     * 
     *
     * @param string $id ID (required)
     * @return \Nomad\Model\JobForcePeriodicResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function forcePeriodic($id)
    {
        list($response, $statusCode, $httpHeader) = $this->forcePeriodicWithHttpInfo ($id);
        return $response; 
    }


    /**
     * forcePeriodicWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @return Array of \Nomad\Model\JobForcePeriodicResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function forcePeriodicWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling forcePeriodic');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}/periodic/force";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\JobForcePeriodicResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\JobForcePeriodicResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\JobForcePeriodicResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getSummary
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $region Cross-Region Request (optional)
     * @return \Nomad\Model\GetJobSummaryResponse
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getSummary($id, $region = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getSummaryWithHttpInfo ($id, $region);
        return $response; 
    }


    /**
     * getSummaryWithHttpInfo
     *
     * 
     *
     * @param string $id ID (required)
     * @param string $region Cross-Region Request (optional)
     * @return Array of \Nomad\Model\GetJobSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Nomad\ApiException on non-2xx response
     */
    public function getSummaryWithHttpInfo($id, $region = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getSummary');
        }
  
        // parse inputs
        $resourcePath = "/job/{id}/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($region !== null) {
            $queryParams['region'] = $this->apiClient->getSerializer()->toQueryValue($region);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Nomad\Model\GetJobSummaryResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Nomad\ObjectSerializer::deserialize($response, '\Nomad\Model\GetJobSummaryResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Nomad\ObjectSerializer::deserialize($e->getResponseBody(), '\Nomad\Model\GetJobSummaryResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
