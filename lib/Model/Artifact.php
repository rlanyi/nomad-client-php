<?php
/**
 * Artifact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * Artifact Class Doc Comment
 *
 * @category    Class
 * @description Nomad downloads artifacts using go-getter. The go-getter library allows downloading of artifacts from various sources using a URL as the input source. The key-value pairs given in the options block map directly to parameters appended to the supplied source URL. Nomad allows downloading http, https, and S3 artifacts. If these artifacts are archives (zip, tar.gz, bz2, etc.), these will be unarchived before the task is started.
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Artifact implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'getter_options' => 'string[]',
        'getter_source' => 'string',
        'relative_dest' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'getter_options' => 'GetterOptions',
        'getter_source' => 'GetterSource',
        'relative_dest' => 'RelativeDest'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'getter_options' => 'setGetterOptions',
        'getter_source' => 'setGetterSource',
        'relative_dest' => 'setRelativeDest'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'getter_options' => 'getGetterOptions',
        'getter_source' => 'getGetterSource',
        'relative_dest' => 'getRelativeDest'
    );
  
    
    /**
      * $getter_options 
      * @var string[]
      */
    protected $getter_options;
    
    /**
      * $getter_source 
      * @var string
      */
    protected $getter_source;
    
    /**
      * $relative_dest 
      * @var string
      */
    protected $relative_dest;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->getter_options = $data["getter_options"];
            $this->getter_source = $data["getter_source"];
            $this->relative_dest = $data["relative_dest"];
        }
    }
    
    /**
     * Gets getter_options
     * @return string[]
     */
    public function getGetterOptions()
    {
        return $this->getter_options;
    }
  
    /**
     * Sets getter_options
     * @param string[] $getter_options 
     * @return $this
     */
    public function setGetterOptions($getter_options)
    {
        
        $this->getter_options = $getter_options;
        return $this;
    }
    
    /**
     * Gets getter_source
     * @return string
     */
    public function getGetterSource()
    {
        return $this->getter_source;
    }
  
    /**
     * Sets getter_source
     * @param string $getter_source 
     * @return $this
     */
    public function setGetterSource($getter_source)
    {
        
        $this->getter_source = $getter_source;
        return $this;
    }
    
    /**
     * Gets relative_dest
     * @return string
     */
    public function getRelativeDest()
    {
        return $this->relative_dest;
    }
  
    /**
     * Sets relative_dest
     * @param string $relative_dest 
     * @return $this
     */
    public function setRelativeDest($relative_dest)
    {
        
        $this->relative_dest = $relative_dest;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
