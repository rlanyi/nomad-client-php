<?php
/**
 * Checks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * Checks Class Doc Comment
 *
 * @category    Class
 * @description Model for Checks
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Checks implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'args' => 'string',
        'command' => 'string',
        'id' => 'string',
        'interval' => 'int',
        'name' => 'string',
        'path' => 'string',
        'protocol' => 'string',
        'timeout' => 'int',
        'type' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'args' => 'Args',
        'command' => 'Command',
        'id' => 'Id',
        'interval' => 'Interval',
        'name' => 'Name',
        'path' => 'Path',
        'protocol' => 'Protocol',
        'timeout' => 'Timeout',
        'type' => 'Type'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'args' => 'setArgs',
        'command' => 'setCommand',
        'id' => 'setId',
        'interval' => 'setInterval',
        'name' => 'setName',
        'path' => 'setPath',
        'protocol' => 'setProtocol',
        'timeout' => 'setTimeout',
        'type' => 'setType'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'args' => 'getArgs',
        'command' => 'getCommand',
        'id' => 'getId',
        'interval' => 'getInterval',
        'name' => 'getName',
        'path' => 'getPath',
        'protocol' => 'getProtocol',
        'timeout' => 'getTimeout',
        'type' => 'getType'
    );
  
    
    /**
      * $args 
      * @var string
      */
    protected $args;
    
    /**
      * $command 
      * @var string
      */
    protected $command;
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $interval 
      * @var int
      */
    protected $interval;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $path 
      * @var string
      */
    protected $path;
    
    /**
      * $protocol 
      * @var string
      */
    protected $protocol;
    
    /**
      * $timeout 
      * @var int
      */
    protected $timeout;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->args = $data["args"];
            $this->command = $data["command"];
            $this->id = $data["id"];
            $this->interval = $data["interval"];
            $this->name = $data["name"];
            $this->path = $data["path"];
            $this->protocol = $data["protocol"];
            $this->timeout = $data["timeout"];
            $this->type = $data["type"];
        }
    }
    
    /**
     * Gets args
     * @return string
     */
    public function getArgs()
    {
        return $this->args;
    }
  
    /**
     * Sets args
     * @param string $args 
     * @return $this
     */
    public function setArgs($args)
    {
        
        $this->args = $args;
        return $this;
    }
    
    /**
     * Gets command
     * @return string
     */
    public function getCommand()
    {
        return $this->command;
    }
  
    /**
     * Sets command
     * @param string $command 
     * @return $this
     */
    public function setCommand($command)
    {
        
        $this->command = $command;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets interval
     * @return int
     */
    public function getInterval()
    {
        return $this->interval;
    }
  
    /**
     * Sets interval
     * @param int $interval 
     * @return $this
     */
    public function setInterval($interval)
    {
        
        $this->interval = $interval;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }
  
    /**
     * Sets path
     * @param string $path 
     * @return $this
     */
    public function setPath($path)
    {
        
        $this->path = $path;
        return $this;
    }
    
    /**
     * Gets protocol
     * @return string
     */
    public function getProtocol()
    {
        return $this->protocol;
    }
  
    /**
     * Sets protocol
     * @param string $protocol 
     * @return $this
     */
    public function setProtocol($protocol)
    {
        
        $this->protocol = $protocol;
        return $this;
    }
    
    /**
     * Gets timeout
     * @return int
     */
    public function getTimeout()
    {
        return $this->timeout;
    }
  
    /**
     * Sets timeout
     * @param int $timeout 
     * @return $this
     */
    public function setTimeout($timeout)
    {
        
        $this->timeout = $timeout;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
