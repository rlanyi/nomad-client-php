<?php
/**
 * GetJobResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * GetJobResponse Class Doc Comment
 *
 * @category    Class
 * @description Model for GetJobResponse
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetJobResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'all_at_once' => 'bool',
        'constraints' => '\Nomad\Model\Constraint[]',
        'create_index' => 'int',
        'datacenters' => 'string[]',
        'id' => 'string',
        'meta' => 'string[]',
        'modify_index' => 'int',
        'name' => 'string',
        'priority' => 'int',
        'region' => 'string',
        'status' => 'string',
        'status_description' => 'string',
        'task_groups' => '\Nomad\Model\TaskGroup[]',
        'type' => 'string',
        'update' => '\Nomad\Model\UpdateStrategy'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'all_at_once' => 'AllAtOnce',
        'constraints' => 'Constraints',
        'create_index' => 'CreateIndex',
        'datacenters' => 'Datacenters',
        'id' => 'ID',
        'meta' => 'Meta',
        'modify_index' => 'ModifyIndex',
        'name' => 'Name',
        'priority' => 'Priority',
        'region' => 'Region',
        'status' => 'Status',
        'status_description' => 'StatusDescription',
        'task_groups' => 'TaskGroups',
        'type' => 'Type',
        'update' => 'Update'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'all_at_once' => 'setAllAtOnce',
        'constraints' => 'setConstraints',
        'create_index' => 'setCreateIndex',
        'datacenters' => 'setDatacenters',
        'id' => 'setId',
        'meta' => 'setMeta',
        'modify_index' => 'setModifyIndex',
        'name' => 'setName',
        'priority' => 'setPriority',
        'region' => 'setRegion',
        'status' => 'setStatus',
        'status_description' => 'setStatusDescription',
        'task_groups' => 'setTaskGroups',
        'type' => 'setType',
        'update' => 'setUpdate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'all_at_once' => 'getAllAtOnce',
        'constraints' => 'getConstraints',
        'create_index' => 'getCreateIndex',
        'datacenters' => 'getDatacenters',
        'id' => 'getId',
        'meta' => 'getMeta',
        'modify_index' => 'getModifyIndex',
        'name' => 'getName',
        'priority' => 'getPriority',
        'region' => 'getRegion',
        'status' => 'getStatus',
        'status_description' => 'getStatusDescription',
        'task_groups' => 'getTaskGroups',
        'type' => 'getType',
        'update' => 'getUpdate'
    );
  
    
    /**
      * $all_at_once 
      * @var bool
      */
    protected $all_at_once;
    
    /**
      * $constraints 
      * @var \Nomad\Model\Constraint[]
      */
    protected $constraints;
    
    /**
      * $create_index 
      * @var int
      */
    protected $create_index;
    
    /**
      * $datacenters 
      * @var string[]
      */
    protected $datacenters;
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $meta 
      * @var string[]
      */
    protected $meta;
    
    /**
      * $modify_index 
      * @var int
      */
    protected $modify_index;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $priority 
      * @var int
      */
    protected $priority;
    
    /**
      * $region 
      * @var string
      */
    protected $region;
    
    /**
      * $status 
      * @var string
      */
    protected $status;
    
    /**
      * $status_description 
      * @var string
      */
    protected $status_description;
    
    /**
      * $task_groups 
      * @var \Nomad\Model\TaskGroup[]
      */
    protected $task_groups;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    
    /**
      * $update 
      * @var \Nomad\Model\UpdateStrategy
      */
    protected $update;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->all_at_once = $data["all_at_once"];
            $this->constraints = $data["constraints"];
            $this->create_index = $data["create_index"];
            $this->datacenters = $data["datacenters"];
            $this->id = $data["id"];
            $this->meta = $data["meta"];
            $this->modify_index = $data["modify_index"];
            $this->name = $data["name"];
            $this->priority = $data["priority"];
            $this->region = $data["region"];
            $this->status = $data["status"];
            $this->status_description = $data["status_description"];
            $this->task_groups = $data["task_groups"];
            $this->type = $data["type"];
            $this->update = $data["update"];
        }
    }
    
    /**
     * Gets all_at_once
     * @return bool
     */
    public function getAllAtOnce()
    {
        return $this->all_at_once;
    }
  
    /**
     * Sets all_at_once
     * @param bool $all_at_once 
     * @return $this
     */
    public function setAllAtOnce($all_at_once)
    {
        
        $this->all_at_once = $all_at_once;
        return $this;
    }
    
    /**
     * Gets constraints
     * @return \Nomad\Model\Constraint[]
     */
    public function getConstraints()
    {
        return $this->constraints;
    }
  
    /**
     * Sets constraints
     * @param \Nomad\Model\Constraint[] $constraints 
     * @return $this
     */
    public function setConstraints($constraints)
    {
        
        $this->constraints = $constraints;
        return $this;
    }
    
    /**
     * Gets create_index
     * @return int
     */
    public function getCreateIndex()
    {
        return $this->create_index;
    }
  
    /**
     * Sets create_index
     * @param int $create_index 
     * @return $this
     */
    public function setCreateIndex($create_index)
    {
        
        $this->create_index = $create_index;
        return $this;
    }
    
    /**
     * Gets datacenters
     * @return string[]
     */
    public function getDatacenters()
    {
        return $this->datacenters;
    }
  
    /**
     * Sets datacenters
     * @param string[] $datacenters 
     * @return $this
     */
    public function setDatacenters($datacenters)
    {
        
        $this->datacenters = $datacenters;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets meta
     * @return string[]
     */
    public function getMeta()
    {
        return $this->meta;
    }
  
    /**
     * Sets meta
     * @param string[] $meta 
     * @return $this
     */
    public function setMeta($meta)
    {
        
        $this->meta = $meta;
        return $this;
    }
    
    /**
     * Gets modify_index
     * @return int
     */
    public function getModifyIndex()
    {
        return $this->modify_index;
    }
  
    /**
     * Sets modify_index
     * @param int $modify_index 
     * @return $this
     */
    public function setModifyIndex($modify_index)
    {
        
        $this->modify_index = $modify_index;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->priority;
    }
  
    /**
     * Sets priority
     * @param int $priority 
     * @return $this
     */
    public function setPriority($priority)
    {
        
        $this->priority = $priority;
        return $this;
    }
    
    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->region;
    }
  
    /**
     * Sets region
     * @param string $region 
     * @return $this
     */
    public function setRegion($region)
    {
        
        $this->region = $region;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets status_description
     * @return string
     */
    public function getStatusDescription()
    {
        return $this->status_description;
    }
  
    /**
     * Sets status_description
     * @param string $status_description 
     * @return $this
     */
    public function setStatusDescription($status_description)
    {
        
        $this->status_description = $status_description;
        return $this;
    }
    
    /**
     * Gets task_groups
     * @return \Nomad\Model\TaskGroup[]
     */
    public function getTaskGroups()
    {
        return $this->task_groups;
    }
  
    /**
     * Sets task_groups
     * @param \Nomad\Model\TaskGroup[] $task_groups 
     * @return $this
     */
    public function setTaskGroups($task_groups)
    {
        
        $this->task_groups = $task_groups;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets update
     * @return \Nomad\Model\UpdateStrategy
     */
    public function getUpdate()
    {
        return $this->update;
    }
  
    /**
     * Sets update
     * @param \Nomad\Model\UpdateStrategy $update 
     * @return $this
     */
    public function setUpdate($update)
    {
        
        $this->update = $update;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
