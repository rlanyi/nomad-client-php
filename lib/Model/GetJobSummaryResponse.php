<?php
/**
 * GetJobSummaryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * GetJobSummaryResponse Class Doc Comment
 *
 * @category    Class
 * @description Model for GetJobSummaryResponse
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetJobSummaryResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'children' => '\Nomad\Model\Children',
        'create_index' => 'int',
        'job_id' => 'string',
        'modify_index' => 'int',
        'summary' => '\Nomad\Model\Summary'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'children' => 'Children',
        'create_index' => 'CreateIndex',
        'job_id' => 'JobID',
        'modify_index' => 'ModifyIndex',
        'summary' => 'Summary'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'children' => 'setChildren',
        'create_index' => 'setCreateIndex',
        'job_id' => 'setJobId',
        'modify_index' => 'setModifyIndex',
        'summary' => 'setSummary'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'children' => 'getChildren',
        'create_index' => 'getCreateIndex',
        'job_id' => 'getJobId',
        'modify_index' => 'getModifyIndex',
        'summary' => 'getSummary'
    );
  
    
    /**
      * $children 
      * @var \Nomad\Model\Children
      */
    protected $children;
    
    /**
      * $create_index 
      * @var int
      */
    protected $create_index;
    
    /**
      * $job_id 
      * @var string
      */
    protected $job_id;
    
    /**
      * $modify_index 
      * @var int
      */
    protected $modify_index;
    
    /**
      * $summary 
      * @var \Nomad\Model\Summary
      */
    protected $summary;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->children = $data["children"];
            $this->create_index = $data["create_index"];
            $this->job_id = $data["job_id"];
            $this->modify_index = $data["modify_index"];
            $this->summary = $data["summary"];
        }
    }
    
    /**
     * Gets children
     * @return \Nomad\Model\Children
     */
    public function getChildren()
    {
        return $this->children;
    }
  
    /**
     * Sets children
     * @param \Nomad\Model\Children $children 
     * @return $this
     */
    public function setChildren($children)
    {
        
        $this->children = $children;
        return $this;
    }
    
    /**
     * Gets create_index
     * @return int
     */
    public function getCreateIndex()
    {
        return $this->create_index;
    }
  
    /**
     * Sets create_index
     * @param int $create_index 
     * @return $this
     */
    public function setCreateIndex($create_index)
    {
        
        $this->create_index = $create_index;
        return $this;
    }
    
    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->job_id;
    }
  
    /**
     * Sets job_id
     * @param string $job_id 
     * @return $this
     */
    public function setJobId($job_id)
    {
        
        $this->job_id = $job_id;
        return $this;
    }
    
    /**
     * Gets modify_index
     * @return int
     */
    public function getModifyIndex()
    {
        return $this->modify_index;
    }
  
    /**
     * Sets modify_index
     * @param int $modify_index 
     * @return $this
     */
    public function setModifyIndex($modify_index)
    {
        
        $this->modify_index = $modify_index;
        return $this;
    }
    
    /**
     * Gets summary
     * @return \Nomad\Model\Summary
     */
    public function getSummary()
    {
        return $this->summary;
    }
  
    /**
     * Sets summary
     * @param \Nomad\Model\Summary $summary 
     * @return $this
     */
    public function setSummary($summary)
    {
        
        $this->summary = $summary;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
