<?php
/**
 * JobDispatchResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * JobDispatchResponse Class Doc Comment
 *
 * @category    Class
 * @description Model for JobDispatchResponse
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobDispatchResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'dispatched_job_id' => 'string',
        'eval_create_index' => 'int',
        'eval_id' => 'string',
        'index' => 'int',
        'job_create_index' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'dispatched_job_id' => 'DispatchedJobID',
        'eval_create_index' => 'EvalCreateIndex',
        'eval_id' => 'EvalID',
        'index' => 'Index',
        'job_create_index' => 'JobCreateIndex'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'dispatched_job_id' => 'setDispatchedJobId',
        'eval_create_index' => 'setEvalCreateIndex',
        'eval_id' => 'setEvalId',
        'index' => 'setIndex',
        'job_create_index' => 'setJobCreateIndex'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'dispatched_job_id' => 'getDispatchedJobId',
        'eval_create_index' => 'getEvalCreateIndex',
        'eval_id' => 'getEvalId',
        'index' => 'getIndex',
        'job_create_index' => 'getJobCreateIndex'
    );
  
    
    /**
      * $dispatched_job_id 
      * @var string
      */
    protected $dispatched_job_id;
    
    /**
      * $eval_create_index 
      * @var int
      */
    protected $eval_create_index;
    
    /**
      * $eval_id 
      * @var string
      */
    protected $eval_id;
    
    /**
      * $index 
      * @var int
      */
    protected $index;
    
    /**
      * $job_create_index 
      * @var int
      */
    protected $job_create_index;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->dispatched_job_id = $data["dispatched_job_id"];
            $this->eval_create_index = $data["eval_create_index"];
            $this->eval_id = $data["eval_id"];
            $this->index = $data["index"];
            $this->job_create_index = $data["job_create_index"];
        }
    }
    
    /**
     * Gets dispatched_job_id
     * @return string
     */
    public function getDispatchedJobId()
    {
        return $this->dispatched_job_id;
    }
  
    /**
     * Sets dispatched_job_id
     * @param string $dispatched_job_id 
     * @return $this
     */
    public function setDispatchedJobId($dispatched_job_id)
    {
        
        $this->dispatched_job_id = $dispatched_job_id;
        return $this;
    }
    
    /**
     * Gets eval_create_index
     * @return int
     */
    public function getEvalCreateIndex()
    {
        return $this->eval_create_index;
    }
  
    /**
     * Sets eval_create_index
     * @param int $eval_create_index 
     * @return $this
     */
    public function setEvalCreateIndex($eval_create_index)
    {
        
        $this->eval_create_index = $eval_create_index;
        return $this;
    }
    
    /**
     * Gets eval_id
     * @return string
     */
    public function getEvalId()
    {
        return $this->eval_id;
    }
  
    /**
     * Sets eval_id
     * @param string $eval_id 
     * @return $this
     */
    public function setEvalId($eval_id)
    {
        
        $this->eval_id = $eval_id;
        return $this;
    }
    
    /**
     * Gets index
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }
  
    /**
     * Sets index
     * @param int $index 
     * @return $this
     */
    public function setIndex($index)
    {
        
        $this->index = $index;
        return $this;
    }
    
    /**
     * Gets job_create_index
     * @return int
     */
    public function getJobCreateIndex()
    {
        return $this->job_create_index;
    }
  
    /**
     * Sets job_create_index
     * @param int $job_create_index 
     * @return $this
     */
    public function setJobCreateIndex($job_create_index)
    {
        
        $this->job_create_index = $job_create_index;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
