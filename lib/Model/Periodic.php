<?php
/**
 * Periodic
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * Periodic Class Doc Comment
 *
 * @category    Class
 * @description Periodic allows the job to be scheduled at fixed times, dates or intervals. The periodic expression is always evaluated in the UTC timezone to ensure consistent evaluation when Nomad Servers span multiple time zones.
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Periodic implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'enabled' => 'bool',
        'prohibit_overlap' => 'bool',
        'spec' => 'string',
        'spec_type' => 'string',
        'time_zone' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'enabled' => 'Enabled',
        'prohibit_overlap' => 'ProhibitOverlap',
        'spec' => 'Spec',
        'spec_type' => 'SpecType',
        'time_zone' => 'time_zone'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'enabled' => 'setEnabled',
        'prohibit_overlap' => 'setProhibitOverlap',
        'spec' => 'setSpec',
        'spec_type' => 'setSpecType',
        'time_zone' => 'setTimeZone'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'enabled' => 'getEnabled',
        'prohibit_overlap' => 'getProhibitOverlap',
        'spec' => 'getSpec',
        'spec_type' => 'getSpecType',
        'time_zone' => 'getTimeZone'
    );
  
    
    /**
      * $enabled 
      * @var bool
      */
    protected $enabled;
    
    /**
      * $prohibit_overlap 
      * @var bool
      */
    protected $prohibit_overlap;
    
    /**
      * $spec 
      * @var string
      */
    protected $spec;
    
    /**
      * $spec_type 
      * @var string
      */
    protected $spec_type;
    
    /**
      * $time_zone 
      * @var string
      */
    protected $time_zone;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->enabled = $data["enabled"];
            $this->prohibit_overlap = $data["prohibit_overlap"];
            $this->spec = $data["spec"];
            $this->spec_type = $data["spec_type"];
            $this->time_zone = $data["time_zone"];
        }
    }
    
    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }
  
    /**
     * Sets enabled
     * @param bool $enabled 
     * @return $this
     */
    public function setEnabled($enabled)
    {
        
        $this->enabled = $enabled;
        return $this;
    }
    
    /**
     * Gets prohibit_overlap
     * @return bool
     */
    public function getProhibitOverlap()
    {
        return $this->prohibit_overlap;
    }
  
    /**
     * Sets prohibit_overlap
     * @param bool $prohibit_overlap 
     * @return $this
     */
    public function setProhibitOverlap($prohibit_overlap)
    {
        
        $this->prohibit_overlap = $prohibit_overlap;
        return $this;
    }
    
    /**
     * Gets spec
     * @return string
     */
    public function getSpec()
    {
        return $this->spec;
    }
  
    /**
     * Sets spec
     * @param string $spec 
     * @return $this
     */
    public function setSpec($spec)
    {
        
        $this->spec = $spec;
        return $this;
    }
    
    /**
     * Gets spec_type
     * @return string
     */
    public function getSpecType()
    {
        return $this->spec_type;
    }
  
    /**
     * Sets spec_type
     * @param string $spec_type 
     * @return $this
     */
    public function setSpecType($spec_type)
    {
        $allowed_values = array("cron");
        if (!in_array($spec_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'spec_type', must be one of 'cron'");
        }
        $this->spec_type = $spec_type;
        return $this;
    }
    
    /**
     * Gets time_zone
     * @return string
     */
    public function getTimeZone()
    {
        return $this->time_zone;
    }
  
    /**
     * Sets time_zone
     * @param string $time_zone 
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        
        $this->time_zone = $time_zone;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
