<?php
/**
 * Service
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * Service Class Doc Comment
 *
 * @category    Class
 * @description Model for Services
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Service implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'checks' => '\Nomad\Model\Checks[]',
        'name' => 'string',
        'port_label' => 'string',
        'tags' => 'string[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'checks' => 'Checks',
        'name' => 'Name',
        'port_label' => 'PortLabel',
        'tags' => 'Tags'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'checks' => 'setChecks',
        'name' => 'setName',
        'port_label' => 'setPortLabel',
        'tags' => 'setTags'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'checks' => 'getChecks',
        'name' => 'getName',
        'port_label' => 'getPortLabel',
        'tags' => 'getTags'
    );
  
    
    /**
      * $checks 
      * @var \Nomad\Model\Checks[]
      */
    protected $checks;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $port_label 
      * @var string
      */
    protected $port_label;
    
    /**
      * $tags 
      * @var string[]
      */
    protected $tags;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->checks = $data["checks"];
            $this->name = $data["name"];
            $this->port_label = $data["port_label"];
            $this->tags = $data["tags"];
        }
    }
    
    /**
     * Gets checks
     * @return \Nomad\Model\Checks[]
     */
    public function getChecks()
    {
        return $this->checks;
    }
  
    /**
     * Sets checks
     * @param \Nomad\Model\Checks[] $checks 
     * @return $this
     */
    public function setChecks($checks)
    {
        
        $this->checks = $checks;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets port_label
     * @return string
     */
    public function getPortLabel()
    {
        return $this->port_label;
    }
  
    /**
     * Sets port_label
     * @param string $port_label 
     * @return $this
     */
    public function setPortLabel($port_label)
    {
        
        $this->port_label = $port_label;
        return $this;
    }
    
    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->tags;
    }
  
    /**
     * Sets tags
     * @param string[] $tags 
     * @return $this
     */
    public function setTags($tags)
    {
        
        $this->tags = $tags;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
