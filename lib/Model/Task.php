<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * Task Class Doc Comment
 *
 * @category    Class
 * @description Model for Tasks
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Task implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'artifacts' => '\Nomad\Model\Artifact[]',
        'config' => 'string[]',
        'constraints' => '\Nomad\Model\Constraint[]',
        'dispatch_payload' => '\Nomad\Model\DispatchPayload',
        'driver' => 'string',
        'env' => '\Nomad\Model\Env',
        'kill_timeout' => 'int',
        'leader' => 'bool',
        'log_config' => '\Nomad\Model\LogConfig',
        'meta' => 'string[]',
        'name' => 'string',
        'resources' => '\Nomad\Model\Resources',
        'services' => '\Nomad\Model\Service[]',
        'templates' => '\Nomad\Model\Template[]',
        'user' => 'string',
        'vault' => '\Nomad\Model\Vault'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'artifacts' => 'Artifacts',
        'config' => 'Config',
        'constraints' => 'Constraints',
        'dispatch_payload' => 'DispatchPayload',
        'driver' => 'Driver',
        'env' => 'Env',
        'kill_timeout' => 'KillTimeout',
        'leader' => 'leader',
        'log_config' => 'LogConfig',
        'meta' => 'Meta',
        'name' => 'Name',
        'resources' => 'Resources',
        'services' => 'Services',
        'templates' => 'Templates',
        'user' => 'User',
        'vault' => 'Vault'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'artifacts' => 'setArtifacts',
        'config' => 'setConfig',
        'constraints' => 'setConstraints',
        'dispatch_payload' => 'setDispatchPayload',
        'driver' => 'setDriver',
        'env' => 'setEnv',
        'kill_timeout' => 'setKillTimeout',
        'leader' => 'setLeader',
        'log_config' => 'setLogConfig',
        'meta' => 'setMeta',
        'name' => 'setName',
        'resources' => 'setResources',
        'services' => 'setServices',
        'templates' => 'setTemplates',
        'user' => 'setUser',
        'vault' => 'setVault'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'artifacts' => 'getArtifacts',
        'config' => 'getConfig',
        'constraints' => 'getConstraints',
        'dispatch_payload' => 'getDispatchPayload',
        'driver' => 'getDriver',
        'env' => 'getEnv',
        'kill_timeout' => 'getKillTimeout',
        'leader' => 'getLeader',
        'log_config' => 'getLogConfig',
        'meta' => 'getMeta',
        'name' => 'getName',
        'resources' => 'getResources',
        'services' => 'getServices',
        'templates' => 'getTemplates',
        'user' => 'getUser',
        'vault' => 'getVault'
    );
  
    
    /**
      * $artifacts 
      * @var \Nomad\Model\Artifact[]
      */
    protected $artifacts;
    
    /**
      * $config 
      * @var string[]
      */
    protected $config;
    
    /**
      * $constraints 
      * @var \Nomad\Model\Constraint[]
      */
    protected $constraints;
    
    /**
      * $dispatch_payload 
      * @var \Nomad\Model\DispatchPayload
      */
    protected $dispatch_payload;
    
    /**
      * $driver 
      * @var string
      */
    protected $driver;
    
    /**
      * $env 
      * @var \Nomad\Model\Env
      */
    protected $env;
    
    /**
      * $kill_timeout 
      * @var int
      */
    protected $kill_timeout;
    
    /**
      * $leader 
      * @var bool
      */
    protected $leader;
    
    /**
      * $log_config 
      * @var \Nomad\Model\LogConfig
      */
    protected $log_config;
    
    /**
      * $meta 
      * @var string[]
      */
    protected $meta;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $resources 
      * @var \Nomad\Model\Resources
      */
    protected $resources;
    
    /**
      * $services 
      * @var \Nomad\Model\Service[]
      */
    protected $services;
    
    /**
      * $templates 
      * @var \Nomad\Model\Template[]
      */
    protected $templates;
    
    /**
      * $user 
      * @var string
      */
    protected $user;
    
    /**
      * $vault 
      * @var \Nomad\Model\Vault
      */
    protected $vault;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->artifacts = $data["artifacts"];
            $this->config = $data["config"];
            $this->constraints = $data["constraints"];
            $this->dispatch_payload = $data["dispatch_payload"];
            $this->driver = $data["driver"];
            $this->env = $data["env"];
            $this->kill_timeout = $data["kill_timeout"];
            $this->leader = $data["leader"];
            $this->log_config = $data["log_config"];
            $this->meta = $data["meta"];
            $this->name = $data["name"];
            $this->resources = $data["resources"];
            $this->services = $data["services"];
            $this->templates = $data["templates"];
            $this->user = $data["user"];
            $this->vault = $data["vault"];
        }
    }
    
    /**
     * Gets artifacts
     * @return \Nomad\Model\Artifact[]
     */
    public function getArtifacts()
    {
        return $this->artifacts;
    }
  
    /**
     * Sets artifacts
     * @param \Nomad\Model\Artifact[] $artifacts 
     * @return $this
     */
    public function setArtifacts($artifacts)
    {
        
        $this->artifacts = $artifacts;
        return $this;
    }
    
    /**
     * Gets config
     * @return string[]
     */
    public function getConfig()
    {
        return $this->config;
    }
  
    /**
     * Sets config
     * @param string[] $config 
     * @return $this
     */
    public function setConfig($config)
    {
        
        $this->config = $config;
        return $this;
    }
    
    /**
     * Gets constraints
     * @return \Nomad\Model\Constraint[]
     */
    public function getConstraints()
    {
        return $this->constraints;
    }
  
    /**
     * Sets constraints
     * @param \Nomad\Model\Constraint[] $constraints 
     * @return $this
     */
    public function setConstraints($constraints)
    {
        
        $this->constraints = $constraints;
        return $this;
    }
    
    /**
     * Gets dispatch_payload
     * @return \Nomad\Model\DispatchPayload
     */
    public function getDispatchPayload()
    {
        return $this->dispatch_payload;
    }
  
    /**
     * Sets dispatch_payload
     * @param \Nomad\Model\DispatchPayload $dispatch_payload 
     * @return $this
     */
    public function setDispatchPayload($dispatch_payload)
    {
        
        $this->dispatch_payload = $dispatch_payload;
        return $this;
    }
    
    /**
     * Gets driver
     * @return string
     */
    public function getDriver()
    {
        return $this->driver;
    }
  
    /**
     * Sets driver
     * @param string $driver 
     * @return $this
     */
    public function setDriver($driver)
    {
        $allowed_values = array("docker", "exec", "java", "lxc", "qemu", "raw_exec", "rkt");
        if (!in_array($driver, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'driver', must be one of 'docker', 'exec', 'java', 'lxc', 'qemu', 'raw_exec', 'rkt'");
        }
        $this->driver = $driver;
        return $this;
    }
    
    /**
     * Gets env
     * @return \Nomad\Model\Env
     */
    public function getEnv()
    {
        return $this->env;
    }
  
    /**
     * Sets env
     * @param \Nomad\Model\Env $env 
     * @return $this
     */
    public function setEnv($env)
    {
        
        $this->env = $env;
        return $this;
    }
    
    /**
     * Gets kill_timeout
     * @return int
     */
    public function getKillTimeout()
    {
        return $this->kill_timeout;
    }
  
    /**
     * Sets kill_timeout
     * @param int $kill_timeout 
     * @return $this
     */
    public function setKillTimeout($kill_timeout)
    {
        
        $this->kill_timeout = $kill_timeout;
        return $this;
    }
    
    /**
     * Gets leader
     * @return bool
     */
    public function getLeader()
    {
        return $this->leader;
    }
  
    /**
     * Sets leader
     * @param bool $leader 
     * @return $this
     */
    public function setLeader($leader)
    {
        
        $this->leader = $leader;
        return $this;
    }
    
    /**
     * Gets log_config
     * @return \Nomad\Model\LogConfig
     */
    public function getLogConfig()
    {
        return $this->log_config;
    }
  
    /**
     * Sets log_config
     * @param \Nomad\Model\LogConfig $log_config 
     * @return $this
     */
    public function setLogConfig($log_config)
    {
        
        $this->log_config = $log_config;
        return $this;
    }
    
    /**
     * Gets meta
     * @return string[]
     */
    public function getMeta()
    {
        return $this->meta;
    }
  
    /**
     * Sets meta
     * @param string[] $meta 
     * @return $this
     */
    public function setMeta($meta)
    {
        
        $this->meta = $meta;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets resources
     * @return \Nomad\Model\Resources
     */
    public function getResources()
    {
        return $this->resources;
    }
  
    /**
     * Sets resources
     * @param \Nomad\Model\Resources $resources 
     * @return $this
     */
    public function setResources($resources)
    {
        
        $this->resources = $resources;
        return $this;
    }
    
    /**
     * Gets services
     * @return \Nomad\Model\Service[]
     */
    public function getServices()
    {
        return $this->services;
    }
  
    /**
     * Sets services
     * @param \Nomad\Model\Service[] $services 
     * @return $this
     */
    public function setServices($services)
    {
        
        $this->services = $services;
        return $this;
    }
    
    /**
     * Gets templates
     * @return \Nomad\Model\Template[]
     */
    public function getTemplates()
    {
        return $this->templates;
    }
  
    /**
     * Sets templates
     * @param \Nomad\Model\Template[] $templates 
     * @return $this
     */
    public function setTemplates($templates)
    {
        
        $this->templates = $templates;
        return $this;
    }
    
    /**
     * Gets user
     * @return string
     */
    public function getUser()
    {
        return $this->user;
    }
  
    /**
     * Sets user
     * @param string $user 
     * @return $this
     */
    public function setUser($user)
    {
        
        $this->user = $user;
        return $this;
    }
    
    /**
     * Gets vault
     * @return \Nomad\Model\Vault
     */
    public function getVault()
    {
        return $this->vault;
    }
  
    /**
     * Sets vault
     * @param \Nomad\Model\Vault $vault 
     * @return $this
     */
    public function setVault($vault)
    {
        
        $this->vault = $vault;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
