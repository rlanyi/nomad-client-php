<?php
/**
 * TaskGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * TaskGroup Class Doc Comment
 *
 * @category    Class
 * @description Model for TaskGroups
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskGroup implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'constraints' => '\Nomad\Model\Constraint[]',
        'count' => 'int',
        'meta' => 'string[]',
        'name' => 'string',
        'restart_policy' => '\Nomad\Model\RestartPolicy',
        'tasks' => '\Nomad\Model\Task[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'constraints' => 'Constraints',
        'count' => 'Count',
        'meta' => 'Meta',
        'name' => 'Name',
        'restart_policy' => 'RestartPolicy',
        'tasks' => 'Tasks'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'constraints' => 'setConstraints',
        'count' => 'setCount',
        'meta' => 'setMeta',
        'name' => 'setName',
        'restart_policy' => 'setRestartPolicy',
        'tasks' => 'setTasks'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'constraints' => 'getConstraints',
        'count' => 'getCount',
        'meta' => 'getMeta',
        'name' => 'getName',
        'restart_policy' => 'getRestartPolicy',
        'tasks' => 'getTasks'
    );
  
    
    /**
      * $constraints 
      * @var \Nomad\Model\Constraint[]
      */
    protected $constraints;
    
    /**
      * $count 
      * @var int
      */
    protected $count;
    
    /**
      * $meta 
      * @var string[]
      */
    protected $meta;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $restart_policy 
      * @var \Nomad\Model\RestartPolicy
      */
    protected $restart_policy;
    
    /**
      * $tasks 
      * @var \Nomad\Model\Task[]
      */
    protected $tasks;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->constraints = $data["constraints"];
            $this->count = $data["count"];
            $this->meta = $data["meta"];
            $this->name = $data["name"];
            $this->restart_policy = $data["restart_policy"];
            $this->tasks = $data["tasks"];
        }
    }
    
    /**
     * Gets constraints
     * @return \Nomad\Model\Constraint[]
     */
    public function getConstraints()
    {
        return $this->constraints;
    }
  
    /**
     * Sets constraints
     * @param \Nomad\Model\Constraint[] $constraints 
     * @return $this
     */
    public function setConstraints($constraints)
    {
        
        $this->constraints = $constraints;
        return $this;
    }
    
    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }
  
    /**
     * Sets count
     * @param int $count 
     * @return $this
     */
    public function setCount($count)
    {
        
        $this->count = $count;
        return $this;
    }
    
    /**
     * Gets meta
     * @return string[]
     */
    public function getMeta()
    {
        return $this->meta;
    }
  
    /**
     * Sets meta
     * @param string[] $meta 
     * @return $this
     */
    public function setMeta($meta)
    {
        
        $this->meta = $meta;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets restart_policy
     * @return \Nomad\Model\RestartPolicy
     */
    public function getRestartPolicy()
    {
        return $this->restart_policy;
    }
  
    /**
     * Sets restart_policy
     * @param \Nomad\Model\RestartPolicy $restart_policy 
     * @return $this
     */
    public function setRestartPolicy($restart_policy)
    {
        
        $this->restart_policy = $restart_policy;
        return $this;
    }
    
    /**
     * Gets tasks
     * @return \Nomad\Model\Task[]
     */
    public function getTasks()
    {
        return $this->tasks;
    }
  
    /**
     * Sets tasks
     * @param \Nomad\Model\Task[] $tasks 
     * @return $this
     */
    public function setTasks($tasks)
    {
        
        $this->tasks = $tasks;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
