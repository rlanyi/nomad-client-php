<?php
/**
 * Template
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nomad
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nomad\Model;

use \ArrayAccess;
/**
 * Template Class Doc Comment
 *
 * @category    Class
 * @description The Template block instantiates an instance of a template renderer. This creates a convenient way to ship configuration files that are populated from environment variables, Consul data, Vault secrets, or just general configurations within a Nomad task.
 * @package     Nomad
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Template implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'change_mode' => 'string',
        'change_signal' => 'string',
        'dest_path' => 'string',
        'embedded_tmpl' => 'string',
        'left_delim' => 'string',
        'perms' => 'string',
        'right_delim' => 'string',
        'source_path' => 'string',
        'splay' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'change_mode' => 'ChangeMode',
        'change_signal' => 'ChangeSignal',
        'dest_path' => 'DestPath',
        'embedded_tmpl' => 'EmbeddedTmpl',
        'left_delim' => 'LeftDelim',
        'perms' => 'Perms',
        'right_delim' => 'RightDelim',
        'source_path' => 'SourcePath',
        'splay' => 'Splay'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'change_mode' => 'setChangeMode',
        'change_signal' => 'setChangeSignal',
        'dest_path' => 'setDestPath',
        'embedded_tmpl' => 'setEmbeddedTmpl',
        'left_delim' => 'setLeftDelim',
        'perms' => 'setPerms',
        'right_delim' => 'setRightDelim',
        'source_path' => 'setSourcePath',
        'splay' => 'setSplay'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'change_mode' => 'getChangeMode',
        'change_signal' => 'getChangeSignal',
        'dest_path' => 'getDestPath',
        'embedded_tmpl' => 'getEmbeddedTmpl',
        'left_delim' => 'getLeftDelim',
        'perms' => 'getPerms',
        'right_delim' => 'getRightDelim',
        'source_path' => 'getSourcePath',
        'splay' => 'getSplay'
    );
  
    
    /**
      * $change_mode 
      * @var string
      */
    protected $change_mode;
    
    /**
      * $change_signal 
      * @var string
      */
    protected $change_signal;
    
    /**
      * $dest_path 
      * @var string
      */
    protected $dest_path;
    
    /**
      * $embedded_tmpl 
      * @var string
      */
    protected $embedded_tmpl;
    
    /**
      * $left_delim 
      * @var string
      */
    protected $left_delim;
    
    /**
      * $perms 
      * @var string
      */
    protected $perms;
    
    /**
      * $right_delim 
      * @var string
      */
    protected $right_delim;
    
    /**
      * $source_path 
      * @var string
      */
    protected $source_path;
    
    /**
      * $splay 
      * @var int
      */
    protected $splay;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->change_mode = $data["change_mode"];
            $this->change_signal = $data["change_signal"];
            $this->dest_path = $data["dest_path"];
            $this->embedded_tmpl = $data["embedded_tmpl"];
            $this->left_delim = $data["left_delim"];
            $this->perms = $data["perms"];
            $this->right_delim = $data["right_delim"];
            $this->source_path = $data["source_path"];
            $this->splay = $data["splay"];
        }
    }
    
    /**
     * Gets change_mode
     * @return string
     */
    public function getChangeMode()
    {
        return $this->change_mode;
    }
  
    /**
     * Sets change_mode
     * @param string $change_mode 
     * @return $this
     */
    public function setChangeMode($change_mode)
    {
        $allowed_values = array("noop", "restart", "signal");
        if (!in_array($change_mode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'change_mode', must be one of 'noop', 'restart', 'signal'");
        }
        $this->change_mode = $change_mode;
        return $this;
    }
    
    /**
     * Gets change_signal
     * @return string
     */
    public function getChangeSignal()
    {
        return $this->change_signal;
    }
  
    /**
     * Sets change_signal
     * @param string $change_signal 
     * @return $this
     */
    public function setChangeSignal($change_signal)
    {
        
        $this->change_signal = $change_signal;
        return $this;
    }
    
    /**
     * Gets dest_path
     * @return string
     */
    public function getDestPath()
    {
        return $this->dest_path;
    }
  
    /**
     * Sets dest_path
     * @param string $dest_path 
     * @return $this
     */
    public function setDestPath($dest_path)
    {
        
        $this->dest_path = $dest_path;
        return $this;
    }
    
    /**
     * Gets embedded_tmpl
     * @return string
     */
    public function getEmbeddedTmpl()
    {
        return $this->embedded_tmpl;
    }
  
    /**
     * Sets embedded_tmpl
     * @param string $embedded_tmpl 
     * @return $this
     */
    public function setEmbeddedTmpl($embedded_tmpl)
    {
        
        $this->embedded_tmpl = $embedded_tmpl;
        return $this;
    }
    
    /**
     * Gets left_delim
     * @return string
     */
    public function getLeftDelim()
    {
        return $this->left_delim;
    }
  
    /**
     * Sets left_delim
     * @param string $left_delim 
     * @return $this
     */
    public function setLeftDelim($left_delim)
    {
        
        $this->left_delim = $left_delim;
        return $this;
    }
    
    /**
     * Gets perms
     * @return string
     */
    public function getPerms()
    {
        return $this->perms;
    }
  
    /**
     * Sets perms
     * @param string $perms 
     * @return $this
     */
    public function setPerms($perms)
    {
        
        $this->perms = $perms;
        return $this;
    }
    
    /**
     * Gets right_delim
     * @return string
     */
    public function getRightDelim()
    {
        return $this->right_delim;
    }
  
    /**
     * Sets right_delim
     * @param string $right_delim 
     * @return $this
     */
    public function setRightDelim($right_delim)
    {
        
        $this->right_delim = $right_delim;
        return $this;
    }
    
    /**
     * Gets source_path
     * @return string
     */
    public function getSourcePath()
    {
        return $this->source_path;
    }
  
    /**
     * Sets source_path
     * @param string $source_path 
     * @return $this
     */
    public function setSourcePath($source_path)
    {
        
        $this->source_path = $source_path;
        return $this;
    }
    
    /**
     * Gets splay
     * @return int
     */
    public function getSplay()
    {
        return $this->splay;
    }
  
    /**
     * Sets splay
     * @param int $splay 
     * @return $this
     */
    public function setSplay($splay)
    {
        
        $this->splay = $splay;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Nomad\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
